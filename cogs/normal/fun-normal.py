import random

import aiohttp
import disnake
from disnake.ext import commands
from disnake.ext.commands import Context

from helpers import checks


class Choice(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.choice = None

    @disnake.ui.button(label="–û—Ä—ë–ª—å", style=disnake.ButtonStyle.blurple)
    async def confirm(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        self.choice = button.label.lower()
        self.stop()

    @disnake.ui.button(label="–†–µ—à–∫–æ", style=disnake.ButtonStyle.blurple)
    async def cancel(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        self.choice = button.label.lower()
        self.stop()
        
    @disnake.ui.button(label="–¢–∏–º—É—Ä", style=disnake.ButtonStyle.blurple)
    async def confirm(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        self.choice = button.label.lower()
        self.stop()
        
    @disnake.ui.button(label="–ê–ª–∏—Å–∞", style=disnake.ButtonStyle.blurple)
    async def confirm(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        self.choice = button.label.lower()
        self.stop()


class RockPaperScissors(disnake.ui.Select):
    def __init__(self):

        options = [
            disnake.SelectOption(
                label="–ö–∞–º–µ–Ω—å", description="–ù–∞ –≤–∏–¥ - –∫–∞–∫ —Ç–≤–µ—Ä–¥–∞—è –ø–ª–∞—Å—Ç–º–∞—Å—Å–∞.", emoji="ü™®"
            ),
            disnake.SelectOption(
                label="–ë—É–º–∞–≥–∞", description="–î–æ–≤–æ–ª—å–Ω–æ –≤–ª–∞–∂–Ω—ã–π –≤—ã–±–æ—Ä.", emoji="üßª" # –Ω–æ–∂–Ω–∏—Ü—ã-–∫–∞–º–µ–Ω—å-–±—É–º–∞–≥–∞
            ),
            disnake.SelectOption(
                label="–ù–æ–∂–Ω–∏—Ü—ã", description="–û–ø–∞—Å–Ω–µ–Ω—å–∫–∞, –º–æ–∂–Ω–æ –ø–æ—Ä–µ–∑–∞—Ç—å—Å.", emoji="‚úÇ"
            ),
        ]

        super().__init__(
            placeholder="–í—ã–±–∏—Ä–∞—Å—Ç–∏–Ω–∫...",
            min_values=1,
            max_values=1,
            options=options,
        )

    async def callback(self, interaction: disnake.MessageInteraction):
        choices = {
            "–∫–∞–º–µ–Ω—å": 0,
            "–±—É–º–∞–≥–∞": 1,
            "–Ω–æ–∂–Ω–∏—Ü—ã": 2,
        }
        user_choice = self.values[0].lower()
        user_choice_index = choices[user_choice]

        bot_choice = random.choice(list(choices.keys()))
        bot_choice_index = choices[bot_choice]

        result_embed = disnake.Embed(color=0x9C84EF)
        result_embed.set_author(name=interaction.author.display_name, icon_url=interaction.author.avatar.url)

        if user_choice_index == bot_choice_index:
            result_embed.description = "**–ù–∏—á—å—è!**\n–ú—ã –æ–±–∞ –≤—ã–±—Ä–∞–ª–∏ "  ' "' + user_choice + '"'
            result_embed.colour = 0xF59E42
        elif user_choice_index == 0 and bot_choice_index == 2:
            result_embed.description = f"**–ë–ª—è—Ç—å —Ç—ã –≤—ã–π–≥—Ä–∞–ª!**\n–¢—ã –≤—ã–±—Ä–∞–ª {user_choice} –∞ —è" ' "' + bot_choice + '"'
            result_embed.colour = 0x9C84EF
        elif user_choice_index == 1 and bot_choice_index == 0:
            result_embed.description = f"**–ë–ª—è—Ç—å —Ç—ã –≤—ã–π–≥—Ä–∞–ª!**\n–¢—ã –≤—ã–±—Ä–∞–ª {user_choice} –∞ —è" ' "' + bot_choice + '"'
            result_embed.colour = 0x9C84EF
        elif user_choice_index == 2 and bot_choice_index == 1:
            result_embed.description = f"**–ë–ª—è—Ç—å —Ç—ã –≤—ã–π–≥—Ä–∞–ª!**\n–¢—ã –≤—ã–±—Ä–∞–ª {user_choice} –∞ —è" ' "' + bot_choice + '"'
            result_embed.colour = 0x9C84EF
        else:
            result_embed.description = f"**–°–ê–°–ê–ê–ê–ê–ê–ê–ê–¢–¨!**\n–¢—ã –≤—ã–±—Ä–∞–ª {user_choice} –∞ —è" ' "' + bot_choice + '"'
            result_embed.colour = 0xE02B2B
        await interaction.response.defer()
        await interaction.edit_original_message(embed=result_embed, content=None, view=None)


class RockPaperScissorsView(disnake.ui.View):
    def __init__(self):
        super().__init__()

        self.add_item(RockPaperScissors())


class Fun(commands.Cog, name="fun-normal"):
    def __init__(self, bot):
        self.bot = bot

    # @commands.command(
    #     name="randomfact",
    #     description="Get a random fact."
    # )
    # @checks.not_blacklisted()
    # async def randomfact(self, context: Context):
    #     """
    #     Get a random fact.
    #     :param context: The context in which the command has been executed.
    #     """
    #     # This will prevent your bot from stopping everything when doing a web request - see: https://discordpy.readthedocs.io/en/stable/faq.html#how-do-i-make-a-web-request
    #     async with aiohttp.ClientSession() as session:
    #         async with session.get("https://uselessfacts.jsph.pl/random.json?language=en") as request:
    #             if request.status == 200:
    #                 data = await request.json()
    #                 embed = disnake.Embed(
    #                     description=data["text"],
    #                     color=0xD75BF4
    #                 )
    #             else:
    #                 embed = disnake.Embed(
    #                     title="Error!",
    #                     description="–ß—Ç–æ-—Ç–∞ –Ω–µ —Ç–∞–∫ —Å API, –ø—Ä–æ–±–∞–Ω–∏—Ç–µ –ø–æ–∑–∂–µ",
    #                     color=0xE02B2B
    #                 )
    #             await context.send(embed=embed)

    @commands.command(
        name="–º–æ–Ω–µ—Ç–∫–∞",
        description="–ë—Ä–æ—Å–∞–π –º–∞–Ω–µ—Ç—É, –Ω–æ —Å–¥–µ–ª–∞–π –≤—ã–±–æ—Ä"
    )
    @checks.not_blacklisted()
    async def –º–æ–Ω–µ—Ç–∫–∞(self, context: Context) -> None:

        buttons = Choice()
        embed = disnake.Embed(
            description="–¢–≤–æ–µ –≤—ã–±–æ—Ä–æ?",
            color=0x9C84EF
        )
        message = await context.send(embed=embed, view=buttons)
        await buttons.wait()  # –ñ–¥–µ–º, –ø–æ–∫–∞ —Å–ª–µ–π–≤–∏–∫ –Ω–∞–∂–º–µ—Ç –Ω–∞ –∫–Ω–æ–ø–æ—á–∫–∞
        result = random.choice(["–æ—Ä—ë–ª—å", "—Ä–µ—à–∫–æ"])
        if buttons.choice == result:
            # User guessed correctly
            embed = disnake.Embed(
                description=f"–í–µ—Ä–Ω–∞ —Ç—ã —É–≥–∞–¥–∞–ª, —ç—Ç–∞ `{buttons.choice}` —è —Ç–æ–∂–∞ –≤—ã–±–∏—Ä–∞–ª `{result}`.",
                color=0x9C84EF
            )
        else:
            embed = disnake.Embed(
                description=f"–ê–•–ê–•–ê–ê–•! –¢–´ –ü–†–ê–ï–ë–ê–õ `{buttons.choice}` –î–û–ù–¢ –ü–†–ê–í–ò–õ–¨–ù–ê! `{result}` –ë–´–õ –í–ï–†–ù–´–ú –û–¢–í–ï–¢–ê–ú",
                color=0xE02B2B
            )
        await message.edit(embed=embed, view=None)

    @commands.command(
        name="–∫–Ω–±",
        description="–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–µ—Ü—ã-FatCock"
    )
    @checks.not_blacklisted()
    async def rock_paper_scissors(self, context: Context) -> None:

        view = RockPaperScissorsView()
        await context.send("–û–ö–ï–ò –ë–êDDICK, –í–´–ë–ò–†–ê–ô –°–í–û–ô –í–´–ë–û–†", view=view)
        
    @commands.command(
        name="–∏–º—è",
        descriotion="–ü–æ—è—Å–Ω–∏—Ç –∑–∞ —Ç–≤–∞—ë –∏–º—è"
    )
    @checks.not_blacklisted()
    async def –∏–º—è(self, context: Context) -> None:
        
        buttons = Choice()
        embed = disnake.Embed(
            description="–í—ã–±–µ—Ä–∏",
            color=0x9C84EF
        )
        message = await context.send(embed=embed, view=buttons)
        await buttons.wait()
        if buttons.choice == "–ê–ª–∏—Å–∞":
            embed = disnake.Embed(
                description=f"–ú—É–∂—Å–∫–æ–µ –∏–º—è –¢–∏–º—É—Ä –ø–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—é –º–æ–Ω–≥–æ–ª—å—Å–∫–æ–µ. –ó–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–∞–∫—Ç—É–µ—Ç—Å—è –∫–∞–∫ ¬´–∂–µ–ª–µ–∑–æ¬ª. –•–æ—Ç—è –µ—Å—Ç—å –≤–µ—Ä—Å–∏—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —ç—Ç–æ –∏–º—è –º–æ–≥–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –æ—Ç —Ç–∞—Ç–∞—Ä—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏ –î–∞–º–∏—Ä, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∏ –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞. –ö —Å–ª–æ–≤—É, –º—É–∂—Å–∫–æ–µ –∏–º—è –¢–∏–º—É—Ä —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–∏–º–æ–≤–µ—Ä–Ω–æ–π –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å—é –≤ –Ω–∞—à–µ–π –Ω–µ–æ–±—ä—è—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ, –Ω–æ —á—Ç–æ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ, —Ç–∞–∫ —ç—Ç–æ —Ç–æ, —á—Ç–æ –æ–Ω–æ –∏–º–µ–µ—Ç –µ—â–µ –∏ —Ö–æ—Ä–æ—à—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å, –∏ —Å–∏–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É. –ê –µ—â–µ –∏–º—è –¢–∏–º—É—Ä —Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å–æ –º–Ω–æ–≥–∏–º–∏ –∂–µ–Ω—Å–∫–∏–º–∏ —Ä—É—Å—Å–∫–∏–º–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏‚Ä¶",
                color=0x9C84EF
            )
                
        await message.edit(embed=embed, view=None)
    
def setup(bot):
    bot.add_cog(Fun(bot))
