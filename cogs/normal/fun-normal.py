import random

import aiohttp
import disnake
from disnake.ext import commands
from disnake.ext.commands import Context

from helpers import checks


class Choice(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.choice = None

    @disnake.ui.button(label="–û—Ä—ë–ª—å", style=disnake.ButtonStyle.blurple)
    async def confirm(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        self.choice = button.label.lower()
        self.stop()

    @disnake.ui.button(label="–†–µ—à–∫–æ", style=disnake.ButtonStyle.blurple)
    async def cancel(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        self.choice = button.label.lower()
        self.stop()
        
class Names(disnake.ui.Select):
    def __init__(self):
        
        options = [
            disnake.SelectOption(label="–ê–∫—ã–ª–±–µ–∫"),
            disnake.SelectOption(label="–ê–ª–µ–∫—Å–∞–Ω–¥—Ä"),
            disnake.SelectOption(label="–ê–ª–∏—Å–∞"),
            disnake.SelectOption(label="–ê–Ω–∞—Å—Ç–∞—Å–∏—è"),
            disnake.SelectOption(label="–ê–Ω–¥—Ä–µ–π"),
            disnake.SelectOption(label="–í–ª–∞–¥–∏–º–∏—Ä"),
            disnake.SelectOption(label="–í–ª–∞–¥–∏—Å–ª–∞–≤"),
            disnake.SelectOption(label="–î–∞–Ω–∏–∏–ª"),
            disnake.SelectOption(label="–î–µ–Ω–∏—Å"),
            disnake.SelectOption(label="–ï–≥–æ—Ä"),
            disnake.SelectOption(label="–õ–µ–æ–Ω–∏–¥"),
            disnake.SelectOption(label="–û–ª–µ–≥"),
            disnake.SelectOption(label="–¢–µ–º–∏—Ä—Ö–∞–Ω"),
        ]
        
        super().__init__(
            placeholder="–í—ã–±–∏—Ä–∞–π",
            min_values=1,
            max_values=1,
            options=options,
        )
        
        
    async def callback(self, interaction: disnake.MessageInteraction):
        choices = {
            "–∞–∫—ã–ª–±–µ–∫": 0,
            "–∞–ª–µ–∫—Å–∞–Ω–¥—Ä": 1,
            "–∞–ª–∏—Å–∞": 2,
            "–∞–Ω–∞—Å—Ç–∞—Å–∏—è": 3,
            "–∞–Ω–¥—Ä–µ–π": 4,
            "–≤–ª–∞–¥–∏–º–∏—Ä": 5,
            "–≤–ª–∞–¥–∏—Å–ª–∞–≤": 6,
            "–¥–∞–Ω–∏–∏–ª": 7,
            "–¥–µ–Ω–∏—Å": 8,
            "–µ–≥–æ—Ä": 9,
            "–ª–µ–æ–Ω–∏–¥": 10,
            "–æ–ª–µ–≥": 11,
            "—Ç–µ–º–∏—Ä—Ö–∞–Ω": 12,
        }
        user_choice = self.values[0].lower()
        user_choice_index = choices[user_choice]
        
        result_embed = disnake.Embed(color=0x9C84EF)
        result_embed.set_author(name="–ó–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–æ–∫–Ω–æ–≥–æ –∏–º–µ–Ω–∏")
        
        if user_choice_index == 0:
            result_embed.description = "**–ú—É–∂—Å–∫–æ–µ –∏–º—è –ê–∫—ã–ª–±–µ–∫**\n
–•–∞—Ä–∞–∫—Ç–µ—Ä –∏–º–µ–Ω–∏ –ê–∫—ã–ª–±–µ–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –¥–ª—è –Ω–∏—Ö –ø–µ—Ä–≤–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ \
–∑–Ω–∞—á–µ–Ω–∏–µ. –ê–∫—ã–ª–±–µ–∫ - —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å, –æ—á–µ–Ω—å –æ–¥–∞—Ä–µ–Ω–Ω–∞—è –≤ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–∏, –ª–µ–≥–∫–æ –¥–µ–ª–∏—Ç—Å—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∏ \
–Ω–æ–≤–∞—Ç–æ—Ä—Å–∫–∏–º–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏ —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–∞, –æ—Ä–∞—Ç–æ—Ä—Å—Ç–≤–∞. –ò—Ö —Ä–∞–±–æ—Ç–∞ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç, –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—ã—à–∞–µ—Ç \
–¥—Ä—É–≥–∏—Ö, –∏ –ê–∫—ã–ª–±–µ–∫ –Ω–∞—Ö–æ–¥–∏—Ç –æ–≥—Ä–æ–º–Ω—É—é —Ä–∞–¥–æ—Å—Ç—å, –∑–∞—Å—Ç–∞–≤–ª—è—è –¥—Ä—É–≥–∏—Ö —É–ª—ã–±–∞—Ç—å—Å—è –∏ –±—ã—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–º–∏. –ò–∑ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤ \
–º–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–ø—Ä–∏–∑–Ω–æ—Å—Ç—å, –≤—Å–ø—ã–ª—å—á–∏–≤–æ—Å—Ç—å –∏ –æ–±–∏–¥—á–∏–≤–æ—Å—Ç—å. –≠—Ç–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —á–µ—Ä—Ç—ã –º–æ–≥—É—Ç –Ω–∏–≤–∏–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∞–∫—Ç–∏–∫–æ–π\
–º–∏—Ä–Ω–æ–≥–æ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –º–æ–º–µ–Ω—Ç—ã —Ç–∏—à–∏–Ω—ã, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–µ–Ω—É–∂–Ω–æ–µ, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ \
–∑–∞—Ä—è–¥–∏—Ç—å—Å—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π."
            result_embed.colour = 0xFFFF00
        elif user_choice_index == 1:
            result_embed.description = "**–ú—É–∂—Å–∫–æ–µ –∏–º—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä**\n"
            result_embed.colour = 0xFFFF00
        elif user_choice_index == 2:
            result_embed.description = "**–ñ–µ–Ω—Å–∫–æ–µ –∏–º—è –ê–ª–∏—Å–∞**\n"
            result_embed.colour = 0xFFFF00
        elif user_choice_index == 3:
            result_embed.description = "**–ñ–µ–Ω—Å–∫–æ–µ –∏–º—è –ê–Ω–∞—Å—Ç–∞—Å–∏—è**\n"
            result_embed.colour = 0xFFFF00
        elif user_choice_index == 4:
            result_embed.description = "**–ú—É–∂—Å–∫–æ–µ –∏–º—è –ê–Ω–¥—Ä–µ–π**\n"
            result_embed.colour = 0xFFFF00
        elif user_choice_index == 5:
            result_embed.description = "**–ú—É–∂—Å–∫–æ–µ –∏–º—è –í–ª–∞–¥–∏–º–∏—Ä**\n"
            result_embed.colour = 0xFFFF00
        elif user_choice_index == 6:
            result_embed.description = "**–ú—É–∂—Å–∫–æ–µ –∏–º—è –í–ª–∞–¥–∏—Å–ª–∞–≤**\n"
            result_embed.colour = 0xFFFF00
        elif user_choice_index == 7:
            result_embed.description = "**–ú—É–∂—Å–∫–æ–µ –∏–º—è –î–∞–Ω–∏–∏–ª**\n"
            result_embed.colour = 0xFFFF00
        elif user_choice_index == 8:
            result_embed.description = "**–ú—É–∂—Å–∫–æ–µ –∏–º—è –î–µ–Ω–∏—Å**\n"
            result_embed.colour = 0xFFFF00
        elif user_choice_index == 9:
            result_embed.description = "**–ú—É–∂—Å–∫–æ–µ –∏–º—è –ï–≥–æ—Ä**\n"
            result_embed.colour = 0xFFFF00
        elif user_choice_index == 10:
            result_embed.description = "**–ú—É–∂—Å–∫–æ–µ –∏–º—è –õ–µ–æ–Ω–∏–¥**\n"
            result_embed.colour = 0xFFFF00
        elif user_choice_index == 11:
            result_embed.description = "**–ú—É–∂—Å–∫–æ–µ –∏–º—è –õ–µ–æ–Ω–∏–¥**\n"
            result_embed.colour = 0xFFFF00
        elif user_choice_index == 12:
            result_embed.description = "**–ú—É–∂—Å–∫–æ–µ –∏–º—è –¢–µ–º–∏—Ä—Ö–∞–Ω**\n"
            result_embed.colour = 0xFFFF00
        await interaction.response.defer()
        await interaction.edit_original_message(embed=result_embed, content=None, view=None)
        
class NamesView(disnake.ui.View):
    def __init__(self):
        super().__init__()

        self.add_item(Names())
        
class RockPaperScissors(disnake.ui.Select):
    def __init__(self):
        
        options = [
            disnake.SelectOption(
                label="–ö–∞–º–µ–Ω—å", description="–ù–∞ –≤–∏–¥ - –∫–∞–∫ —Ç–≤–µ—Ä–¥–∞—è –ø–ª–∞—Å—Ç–º–∞—Å—Å–∞.", emoji="ü™®"
            ),
            disnake.SelectOption(
                label="–ë—É–º–∞–≥–∞", description="–î–æ–≤–æ–ª—å–Ω–æ –≤–ª–∞–∂–Ω—ã–π –≤—ã–±–æ—Ä.", emoji="üßª" # –Ω–æ–∂–Ω–∏—Ü—ã-–∫–∞–º–µ–Ω—å-–±—É–º–∞–≥–∞
            ),
            disnake.SelectOption(
                label="–ù–æ–∂–Ω–∏—Ü—ã", description="–û–ø–∞—Å–Ω–µ–Ω—å–∫–∞, –º–æ–∂–Ω–æ –ø–æ—Ä–µ–∑–∞—Ç—å—Å.", emoji="‚úÇ"
            ),
        ]

        super().__init__(
            placeholder="–í—ã–±–∏—Ä–∞—Å—Ç–∏–Ω–∫...",
            min_values=1,
            max_values=1,
            options=options,
        )

    async def callback(self, interaction: disnake.MessageInteraction):
        choices = {
            "–∫–∞–º–µ–Ω—å": 0,
            "–±—É–º–∞–≥–∞": 1,
            "–Ω–æ–∂–Ω–∏—Ü—ã": 2,
        }
        user_choice = self.values[0].lower()
        user_choice_index = choices[user_choice]

        bot_choice = random.choice(list(choices.keys()))
        bot_choice_index = choices[bot_choice]

        result_embed = disnake.Embed(color=0x9C84EF)
        result_embed.set_author(name=interaction.author.display_name, icon_url=interaction.author.avatar.url)

        if user_choice_index == bot_choice_index:
            result_embed.description = f"**–ù–∏—á—å—è!**\n–ú—ã –æ–±–∞ –≤—ã–±—Ä–∞–ª–∏ "  ' "' + user_choice + '"'
            result_embed.colour = 0xF59E42
        elif user_choice_index == 0 and bot_choice_index == 2:
            result_embed.description = f"**–ë–ª—è—Ç—å —Ç—ã –≤—ã–π–≥—Ä–∞–ª!**\n–¢—ã –≤—ã–±—Ä–∞–ª {user_choice} –∞ —è" ' "' + bot_choice + '"'
            result_embed.colour = 0x9C84EF
        elif user_choice_index == 1 and bot_choice_index == 0:
            result_embed.description = f"**–ë–ª—è—Ç—å —Ç—ã –≤—ã–π–≥—Ä–∞–ª!**\n–¢—ã –≤—ã–±—Ä–∞–ª {user_choice} –∞ —è" ' "' + bot_choice + '"'
            result_embed.colour = 0x9C84EF
        elif user_choice_index == 2 and bot_choice_index == 1:
            result_embed.description = f"**–ë–ª—è—Ç—å —Ç—ã –≤—ã–π–≥—Ä–∞–ª!**\n–¢—ã –≤—ã–±—Ä–∞–ª {user_choice} –∞ —è" ' "' + bot_choice + '"'
            result_embed.colour = 0x9C84EF
        else:
            result_embed.description = f"**–°–ê–°–ê–ê–ê–ê–ê–ê–ê–¢–¨!**\n–¢—ã –≤—ã–±—Ä–∞–ª {user_choice} –∞ —è" ' "' + bot_choice + '"'
            result_embed.colour = 0xE02B2B
        await interaction.response.defer()
        await interaction.edit_original_message(embed=result_embed, content=None, view=None)


class RockPaperScissorsView(disnake.ui.View):
    def __init__(self):
        super().__init__()

        self.add_item(RockPaperScissors())


class Fun(commands.Cog, name="fun-normal"):
    def __init__(self, bot):
        self.bot = bot

    # @commands.command(
    #     name="randomfact",
    #     description="Get a random fact."
    # )
    # @checks.not_blacklisted()
    # async def randomfact(self, context: Context):
    #     """
    #     Get a random fact.
    #     :param context: The context in which the command has been executed.
    #     """
    #     # This will prevent your bot from stopping everything when doing a web request - see: https://discordpy.readthedocs.io/en/stable/faq.html#how-do-i-make-a-web-request
    #     async with aiohttp.ClientSession() as session:
    #         async with session.get("https://uselessfacts.jsph.pl/random.json?language=en") as request:
    #             if request.status == 200:
    #                 data = await request.json()
    #                 embed = disnake.Embed(
    #                     description=data["text"],
    #                     color=0xD75BF4
    #                 )
    #             else:
    #                 embed = disnake.Embed(
    #                     title="Error!",
    #                     description="–ß—Ç–æ-—Ç–∞ –Ω–µ —Ç–∞–∫ —Å API, –ø—Ä–æ–±–∞–Ω–∏—Ç–µ –ø–æ–∑–∂–µ",
    #                     color=0xE02B2B
    #                 )
    #             await context.send(embed=embed)

    @commands.command(
        name="–º–æ–Ω–µ—Ç–∫–∞",
        description="–ë—Ä–æ—Å–∞–π –º–∞–Ω–µ—Ç—É, –Ω–æ —Å–¥–µ–ª–∞–π –≤—ã–±–æ—Ä"
    )
    @checks.not_blacklisted()
    async def –º–æ–Ω–µ—Ç–∫–∞(self, context: Context) -> None:

        buttons = Choice()
        embed = disnake.Embed(
            description="–¢–≤–æ–µ –≤—ã–±–æ—Ä–æ?",
            color=0x9C84EF
        )
        message = await context.send(embed=embed, view=buttons)
        await buttons.wait()  # –ñ–¥–µ–º, –ø–æ–∫–∞ —Å–ª–µ–π–≤–∏–∫ –Ω–∞–∂–º–µ—Ç –Ω–∞ –∫–Ω–æ–ø–æ—á–∫–∞
        result = random.choice(["–æ—Ä—ë–ª—å", "—Ä–µ—à–∫–æ"])
        if buttons.choice == result:
            # User guessed correctly
            embed = disnake.Embed(
                description=f"–í–µ—Ä–Ω–∞ —Ç—ã —É–≥–∞–¥–∞–ª, —ç—Ç–∞ `{buttons.choice}` —è —Ç–æ–∂–∞ –≤—ã–±–∏—Ä–∞–ª `{result}`.",
                color=0x9C84EF
            )
        else:
            embed = disnake.Embed(
                description=f"–ê–•–ê–•–ê–ê–•! –¢–´ –ü–†–ê–ï–ë–ê–õ `{buttons.choice}` –î–û–ù–¢ –ü–†–ê–í–ò–õ–¨–ù–ê! `{result}` –ë–´–õ –í–ï–†–ù–´–ú –û–¢–í–ï–¢–ê–ú",
                color=0xE02B2B
            )
        await message.edit(embed=embed, view=None)

    @commands.command(
        name="–∫–Ω–±",
        description="–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–µ—Ü—ã-FatCock"
    )
    @checks.not_blacklisted()
    async def rock_paper_scissors(self, context: Context) -> None:

        view = RockPaperScissorsView()
        await context.send("–û–ö–ï–ò –ë–êDDICK, –í–´–ë–ò–†–ê–ô –°–í–û–ô –í–´–ë–û–†", view=view)
        
    @commands.command(
        name="–∏–º—è",
        descriotion="–ü–æ—è—Å–Ω–∏—Ç –∑–∞ —Ç–≤–∞—ë –∏–º—è"
    )
    @checks.not_blacklisted()
    async def names(self, context: Context) -> None:
        
        view = NamesView()
        await context.send("–í—ã–±–µ—Ä–∏ –∏–º—è ~~—Å–≤–æ–µ–≥–æ –∫—Ä–∞—à–∞~~", view=view)
    
def setup(bot):
    bot.add_cog(Fun(bot))
