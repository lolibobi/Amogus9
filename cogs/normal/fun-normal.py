import random

import aiohttp
import disnake
from disnake.ext import commands
from disnake.ext.commands import Context

from helpers import checks


class Choice(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.choice = None

    @disnake.ui.button(label="–û—Ä—ë–ª—å", style=disnake.ButtonStyle.blurple)
    async def confirm(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        self.choice = button.label.lower()
        self.stop()

    @disnake.ui.button(label="–†–µ—à–∫–æ", style=disnake.ButtonStyle.blurple)
    async def cancel(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        self.choice = button.label.lower()
        self.stop()
        
class Names(disnake.ui.Select):
    def __init__(self):
        
        options = [
            disnake.SelectOption(
                label="–ê–ª–∏—Å–∞"
            ),
            disnake.SelectOption(
                label="–¢–∏–º—É—Ä"
            ),
        ]
        
        super().__init__(
            placeholder="–í—ã–±–∏—Ä–∞–π",
            min_values=1,
            max_values=1,
            options=options,
        )
        
        
    async def callback(self, interaction: disnake.MessageInteraction):
        choices = {
            "–ê–ª–∏—Å–∞": 0,
            "–¢–∏–º—É—Ä": 1,
        }
        user_choice = self.values.lower()
        user_choice_index = choices[user_choice]
        
        result_embed = disnake.Embed(color=0x9C84EF)
        result_embed.set_author(name=interaction.author.display_name, icon_url=interaction.author.avatar.url)
        
        if user_choice_index == 0:
            result_embed.description = f"**–ñ–µ–Ω—Å–∫–æ–µ –∏–º—è –ê–ª–∏—Å–∞**\n–ñ–µ–Ω—Å–∫–æ–µ –∏–º—è –ê–ª–∏—Å–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–π —Ñ–æ—Ä–º–æ–π –∏–º–µ–Ω–∏ Adelaide (—Ñ—Ä. Adelaide), –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–≥–æ —Å–æ–±–æ–π —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –¥—Ä–µ–≤–Ω–µ–≥–µ—Ä–º–∞–Ω—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏ Adalheid (Adelheid, Adelheidis). –≠—Ç–æ —Å–ª–æ–∂–Ω–æ–µ —Å–ª–æ–≤–æ –≤–∫–ª—é—á–∞–µ—Ç –¥–≤–∞ –∫–æ—Ä–Ω—è: adal (–±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π, –∑–Ω–∞—Ç–Ω—ã–π) –∏ heid (–≤–∏–¥, —Ä–æ–¥, –æ–±—Ä–∞–∑). –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –∏–º—è Adalheid –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ —á—Ç–æ –∏–Ω–æ–µ, –∫–∞–∫ ¬´–±–ª–∞–≥–æ—Ä–æ–¥–Ω–∞—è –≤–∏–¥–æ–º¬ª, ¬´–±–ª–∞–≥–æ—Ä–æ–¥–Ω–∞—è –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ–º¬ª –∏–ª–∏ –∂–µ –ø—Ä–æ—Å—Ç–æ ¬´–±–ª–∞–≥–æ—Ä–æ–¥—Å—Ç–≤–æ¬ª. –¢–∞–∫–æ–µ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–æ–π, –º–æ–∂–Ω–æ –ø—Ä–∏–∑–Ω–∞—Ç—å –∏ –∑–∞ –∏–º–µ–Ω–µ–º –ê–ª–∏—Å–∞. –°—É—â–µ—Å—Ç–≤—É—é—Ç –≥–∏–ø–æ—Ç–µ–∑—ã –æ —Å–≤—è–∑–∏ –∏–º–µ–Ω–∏ –ê–ª–∏—Å–∞ —Å –≥—Ä–µ—á–µ—Å–∫–∏–º –∂–µ–Ω—Å–∫–∏–º –∏–º–µ–Ω–µ–º –ö–∞–ª–ª–∏—Å—Ç–∞, –∏–ª–∏ —Å –≥—Ä–µ—á–µ—Å–∫–∏–º –∂–µ —Å–ª–æ–≤–æ–º aletheia (¬´–∏—Å—Ç–∏–Ω–∞¬ª)."
            result_embed.colour = 0xF59E42
        elif user_choice_index == 1:
            result_embed.description = f"**–ú—É–∂—Å–∫–æ–µ –∏–º—è –¢–∏–º—É—Ä**\n–¢–∏–º—ÉÃÅ—Ä (—Ç—é—Ä–∫. T√ºm√ºr, Demir ‚Äî ¬´–∂–µ–ª–µ–∑–æ¬ª) ‚Äî –º—É–∂—Å–∫–æ–µ –ª–∏—á–Ω–æ–µ –∏–º—è —Ç—é—Ä–∫—Å–∫–æ–≥–æ –∏ –º–æ–Ω–≥–æ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è. –≠—Ç–æ –∏–º—è –æ–∑–Ω–∞—á–∞–µ—Ç —Å—Ç–æ–π–∫–æ–≥–æ, –ø—Ä–æ—á–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. –ò–º—è —Å—Ç–∞–ª–æ –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–º –±–ª–∞–≥–æ–¥–∞—Ä—è –ø–æ–ª–∫–æ–≤–æ–¥—Ü—É –∏ –∑–∞–≤–æ–µ–≤–∞—Ç–µ–ª—é –¢–∏–º—É—Ä—É (–¢–∞–º–µ—Ä–ª–∞–Ω—É) (1336‚Äî1405)."
            result_embed.colour = 0xF59E42
        await interaction.response.defer()
        await interaction.edit_original_message(embed=result_embed, content=None, view=None)
        
class NamesView(disnake.ui.View):
    def __init__(self):
        super().__init__()

        self.add_item(Names())
        
class RockPaperScissors(disnake.ui.Select):
    def __init__(self):
        
        options = [
            disnake.SelectOption(
                label="–ö–∞–º–µ–Ω—å", description="–ù–∞ –≤–∏–¥ - –∫–∞–∫ —Ç–≤–µ—Ä–¥–∞—è –ø–ª–∞—Å—Ç–º–∞—Å—Å–∞.", emoji="ü™®"
            ),
            disnake.SelectOption(
                label="–ë—É–º–∞–≥–∞", description="–î–æ–≤–æ–ª—å–Ω–æ –≤–ª–∞–∂–Ω—ã–π –≤—ã–±–æ—Ä.", emoji="üßª" # –Ω–æ–∂–Ω–∏—Ü—ã-–∫–∞–º–µ–Ω—å-–±—É–º–∞–≥–∞
            ),
            disnake.SelectOption(
                label="–ù–æ–∂–Ω–∏—Ü—ã", description="–û–ø–∞—Å–Ω–µ–Ω—å–∫–∞, –º–æ–∂–Ω–æ –ø–æ—Ä–µ–∑–∞—Ç—å—Å.", emoji="‚úÇ"
            ),
        ]

        super().__init__(
            placeholder="–í—ã–±–∏—Ä–∞—Å—Ç–∏–Ω–∫...",
            min_values=1,
            max_values=1,
            options=options,
        )

    async def callback(self, interaction: disnake.MessageInteraction):
        choices = {
            "–∫–∞–º–µ–Ω—å": 0,
            "–±—É–º–∞–≥–∞": 1,
            "–Ω–æ–∂–Ω–∏—Ü—ã": 2,
        }
        user_choice = self.values[0].lower()
        user_choice_index = choices[user_choice]

        bot_choice = random.choice(list(choices.keys()))
        bot_choice_index = choices[bot_choice]

        result_embed = disnake.Embed(color=0x9C84EF)
        result_embed.set_author(name=interaction.author.display_name, icon_url=interaction.author.avatar.url)

        if user_choice_index == bot_choice_index:
            result_embed.description = f"**–ù–∏—á—å—è!**\n–ú—ã –æ–±–∞ –≤—ã–±—Ä–∞–ª–∏ "  ' "' + user_choice + '"'
            result_embed.colour = 0xF59E42
        elif user_choice_index == 0 and bot_choice_index == 2:
            result_embed.description = f"**–ë–ª—è—Ç—å —Ç—ã –≤—ã–π–≥—Ä–∞–ª!**\n–¢—ã –≤—ã–±—Ä–∞–ª {user_choice} –∞ —è" ' "' + bot_choice + '"'
            result_embed.colour = 0x9C84EF
        elif user_choice_index == 1 and bot_choice_index == 0:
            result_embed.description = f"**–ë–ª—è—Ç—å —Ç—ã –≤—ã–π–≥—Ä–∞–ª!**\n–¢—ã –≤—ã–±—Ä–∞–ª {user_choice} –∞ —è" ' "' + bot_choice + '"'
            result_embed.colour = 0x9C84EF
        elif user_choice_index == 2 and bot_choice_index == 1:
            result_embed.description = f"**–ë–ª—è—Ç—å —Ç—ã –≤—ã–π–≥—Ä–∞–ª!**\n–¢—ã –≤—ã–±—Ä–∞–ª {user_choice} –∞ —è" ' "' + bot_choice + '"'
            result_embed.colour = 0x9C84EF
        else:
            result_embed.description = f"**–°–ê–°–ê–ê–ê–ê–ê–ê–ê–¢–¨!**\n–¢—ã –≤—ã–±—Ä–∞–ª {user_choice} –∞ —è" ' "' + bot_choice + '"'
            result_embed.colour = 0xE02B2B
        await interaction.response.defer()
        await interaction.edit_original_message(embed=result_embed, content=None, view=None)


class RockPaperScissorsView(disnake.ui.View):
    def __init__(self):
        super().__init__()

        self.add_item(RockPaperScissors())


class Fun(commands.Cog, name="fun-normal"):
    def __init__(self, bot):
        self.bot = bot

    # @commands.command(
    #     name="randomfact",
    #     description="Get a random fact."
    # )
    # @checks.not_blacklisted()
    # async def randomfact(self, context: Context):
    #     """
    #     Get a random fact.
    #     :param context: The context in which the command has been executed.
    #     """
    #     # This will prevent your bot from stopping everything when doing a web request - see: https://discordpy.readthedocs.io/en/stable/faq.html#how-do-i-make-a-web-request
    #     async with aiohttp.ClientSession() as session:
    #         async with session.get("https://uselessfacts.jsph.pl/random.json?language=en") as request:
    #             if request.status == 200:
    #                 data = await request.json()
    #                 embed = disnake.Embed(
    #                     description=data["text"],
    #                     color=0xD75BF4
    #                 )
    #             else:
    #                 embed = disnake.Embed(
    #                     title="Error!",
    #                     description="–ß—Ç–æ-—Ç–∞ –Ω–µ —Ç–∞–∫ —Å API, –ø—Ä–æ–±–∞–Ω–∏—Ç–µ –ø–æ–∑–∂–µ",
    #                     color=0xE02B2B
    #                 )
    #             await context.send(embed=embed)

    @commands.command(
        name="–º–æ–Ω–µ—Ç–∫–∞",
        description="–ë—Ä–æ—Å–∞–π –º–∞–Ω–µ—Ç—É, –Ω–æ —Å–¥–µ–ª–∞–π –≤—ã–±–æ—Ä"
    )
    @checks.not_blacklisted()
    async def –º–æ–Ω–µ—Ç–∫–∞(self, context: Context) -> None:

        buttons = Choice()
        embed = disnake.Embed(
            description="–¢–≤–æ–µ –≤—ã–±–æ—Ä–æ?",
            color=0x9C84EF
        )
        message = await context.send(embed=embed, view=buttons)
        await buttons.wait()  # –ñ–¥–µ–º, –ø–æ–∫–∞ —Å–ª–µ–π–≤–∏–∫ –Ω–∞–∂–º–µ—Ç –Ω–∞ –∫–Ω–æ–ø–æ—á–∫–∞
        result = random.choice(["–æ—Ä—ë–ª—å", "—Ä–µ—à–∫–æ"])
        if buttons.choice == result:
            # User guessed correctly
            embed = disnake.Embed(
                description=f"–í–µ—Ä–Ω–∞ —Ç—ã —É–≥–∞–¥–∞–ª, —ç—Ç–∞ `{buttons.choice}` —è —Ç–æ–∂–∞ –≤—ã–±–∏—Ä–∞–ª `{result}`.",
                color=0x9C84EF
            )
        else:
            embed = disnake.Embed(
                description=f"–ê–•–ê–•–ê–ê–•! –¢–´ –ü–†–ê–ï–ë–ê–õ `{buttons.choice}` –î–û–ù–¢ –ü–†–ê–í–ò–õ–¨–ù–ê! `{result}` –ë–´–õ –í–ï–†–ù–´–ú –û–¢–í–ï–¢–ê–ú",
                color=0xE02B2B
            )
        await message.edit(embed=embed, view=None)

    @commands.command(
        name="–∫–Ω–±",
        description="–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–µ—Ü—ã-FatCock"
    )
    @checks.not_blacklisted()
    async def rock_paper_scissors(self, context: Context) -> None:

        view = RockPaperScissorsView()
        await context.send("–û–ö–ï–ò –ë–êDDICK, –í–´–ë–ò–†–ê–ô –°–í–û–ô –í–´–ë–û–†", view=view)
        
    @commands.command(
        name="–∏–º—è",
        descriotion="–ü–æ—è—Å–Ω–∏—Ç –∑–∞ —Ç–≤–∞—ë –∏–º—è"
    )
    @checks.not_blacklisted()
    async def names(self, context: Context) -> None:
        
        view = NamesView()
        await context.send("–í—ã–±–µ—Ä–∏ –∏–º—è ~~—Å–≤–æ–µ–≥–æ –∫—Ä–∞—à–∞~~", view=view)
    
def setup(bot):
    bot.add_cog(Fun(bot))
